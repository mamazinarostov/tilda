from flask import Flask, request, jsonify
import requests
import re

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        app.logger.info("Request headers: %s", request.headers)
        app.logger.info("Request data: %s", request.data)

        phone_number = None

        if request.content_type == 'application/json':
            data = request.get_json()
            app.logger.info("Received JSON data: %s", data)
            
            if isinstance(data, dict) and data.get('test') == 'test':
                app.logger.info("Received test request from Tilda")
                return jsonify({'status': 'success', 'message': 'Test request received successfully'}), 200

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ "Phone" –≤ JSON –¥–∞–Ω–Ω—ã—Ö
            phone_numbers = [item.get('Phone') for item in data if isinstance(item, dict) and 'Phone' in item]
            if not phone_numbers:
                app.logger.error("Phone number not found in the JSON data")
                return jsonify({'status': 'error', 'message': 'Phone number is required'}), 400

            phone_number = phone_numbers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        elif request.content_type == 'application/x-www-form-urlencoded':
            phone_number = request.form.get('Phone')
            app.logger.info("Received form data: %s", request.form)
            if request.form.get('test') == 'test':
                app.logger.info("Received test request from Tilda")
                return jsonify({'status': 'success', 'message': 'Test request received successfully'}), 200

            if not phone_number:
                app.logger.error("Phone number not found in the form data")
                return jsonify({'status': 'error', 'message': 'Phone number is required'}), 400
        elif request.content_type.startswith('multipart/form-data'):
            phone_number = request.form.get('Phone')
            app.logger.info("Received multipart/form-data: %s", request.form)
            if not phone_number:
                app.logger.error("Phone number not found in the multipart form data")
                return jsonify({'status': 'error', 'message': 'Phone number is required'}), 400
        elif request.content_type == 'text/plain':
            data = request.data.decode('utf-8')
            app.logger.info("Received text data: %s", data)
            phone_number_match = re.search(r'Phone:\s*(\+?\d{1,3}[- ]?)?\d{10}', data)
            if phone_number_match:
                phone_number = phone_number_match.group().split(":")[1].strip()
            else:
                app.logger.error("Phone number not found in the text data")
                return jsonify({'status': 'error', 'message': 'Phone number is required'}), 400
        elif request.content_type == 'application/xml':
            data = request.data.decode('utf-8')
            app.logger.info("Received XML data: %s", data)
            phone_number_match = re.search(r'<Phone>(\+?\d{1,3}[- ]?)?\d{10}</Phone>', data)
            if phone_number_match:
                phone_number = phone_number_match.group(0).replace("<Phone>", "").replace("</Phone>", "")
            else:
                app.logger.error("Phone number not found in the XML data")
                return jsonify({'status': 'error', 'message': 'Phone number is required'}), 400
        else:
            app.logger.error("Unsupported Content-Type: %s", request.content_type)
            return jsonify({'status': 'error', 'message': 'Unsupported Content-Type'}), 415

        app.logger.info("Received phone number: %s", phone_number)

        # –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_number = re.sub(r'\D', '', phone_number)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = """üç£ –ü–û–î–ê–†–ö–ò –ó–ê –û–¢–ó–´–í–´ ‚úçÔ∏è

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º—ã –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ "–ú–∞–º–∞ –ó–∏–Ω–∞"! –•–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤–∫—É—Å–Ω–µ–π—à–∏–π —Ä–æ–ª–ª –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–∫–∞–∑–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ —Ç—Ä—ë—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö:

1. 2–ì–ò–°

Mamazina
https://2gis.ru/rostov/geo/70000001062267615

2. –Ø–ù–î–ï–ö–°

https://yandex.ru/profile/26936047750

3. –ì–†–£–ü–ü–ê –í–ö–û–ù–¢–ê–ö–¢–ï

https://vk.com/topic-207395908_48873636

–û—Ç–∑—ã–≤ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å —Å —Ñ–æ—Ç–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ –±–µ–∑ üòá
–ü–æ—Å–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç –Ω–∞—Å –ø–æ–¥–∞—Ä–æ–∫ üéÅ

P.S. –¢–∞–∫ –∂–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ —É –Ω–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å "–ü—Ä–µ–º–∏—É–º-—Ä–æ–ª–ª—ã" –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞. –ñ–¥—ë–º —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! ü•∞

–° –£–≤–∞–∂–µ–Ω–∏–µ–º, –ú–∞–º–∞ –ó–∏–Ω–∞!
"""
        send_whatsapp_message(cleaned_number, message)
        return jsonify({'status': 'success', 'message': 'Message sent successfully'}), 200

    except Exception as e:
        app.logger.error("An error occurred: %s", e, exc_info=True)
        return jsonify({'status': 'error', 'message': 'Internal Server Error'}), 500

def send_whatsapp_message(phone_number, message):
    url = "https://api.green-api.com/waInstance1103960944/sendMessage/557a5f7c1173434086486f390c6ae2290b77f31ba6ca4656aa"
    headers = {
        "Authorization": "Bearer 557a5f7c1173434086486f390c6ae2290b77f31ba6ca4656aa",
        "Content-Type": "application/json"
    }
    chat_id = f"{phone_number}@c.us"
    payload = {
        "chatId": chat_id,
        "message": message
    }
    try:
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        app.logger.info("Message sent successfully: %s", response.json())
    except requests.exceptions.RequestException as e:
        app.logger.error("Request failed: %s", e)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
